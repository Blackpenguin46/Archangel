input {
  beats {
    port => 5044
  }
  
  # Syslog input for various services
  syslog {
    port => 5000
  }
  
  # HTTP input for webhook logs
  http {
    port => 8080
  }
}

filter {
  # Parse Suricata EVE JSON logs
  if [fields][log_type] == "suricata" {
    json {
      source => "message"
    }
    
    if [event_type] == "alert" {
      mutate {
        add_tag => ["security_alert"]
        add_field => { "severity" => "high" }
      }
    }
    
    if [event_type] == "http" {
      mutate {
        add_tag => ["web_traffic"]
      }
    }
  }
  
  # Parse Nginx access logs
  if [fields][log_type] == "nginx_access" {
    grok {
      match => { "message" => "%{NGINXACCESS}" }
    }
    
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    if [response] >= 400 {
      mutate {
        add_tag => ["error"]
      }
    }
  }
  
  # Parse MySQL logs
  if [fields][log_type] == "mysql" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{NUMBER:thread_id:int}\s+%{WORD:command}\s+%{GREEDYDATA:query}" }
    }
    
    if [command] == "Query" {
      if [query] =~ /(?i)(select|insert|update|delete|drop|create|alter)/ {
        mutate {
          add_tag => ["sql_query"]
        }
      }
      
      if [query] =~ /(?i)(union|or 1=1|' or|" or|drop table|information_schema)/ {
        mutate {
          add_tag => ["sql_injection_attempt"]
          add_field => { "severity" => "critical" }
        }
      }
    }
  }
  
  # Parse SSH logs
  if [fields][log_type] == "ssh" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{PROG:program}: %{GREEDYDATA:ssh_message}" }
    }
    
    if [ssh_message] =~ /Failed password/ {
      mutate {
        add_tag => ["ssh_failed_login"]
        add_field => { "severity" => "medium" }
      }
    }
    
    if [ssh_message] =~ /Accepted password/ {
      mutate {
        add_tag => ["ssh_successful_login"]
      }
    }
  }
  
  # Parse Windows Event Logs (if present)
  if [fields][log_type] == "winlogbeat" {
    if [event_id] == 4624 {
      mutate {
        add_tag => ["windows_logon_success"]
      }
    }
    
    if [event_id] == 4625 {
      mutate {
        add_tag => ["windows_logon_failure"]
        add_field => { "severity" => "medium" }
      }
    }
  }
  
  # Add geolocation for external IPs
  if [client_ip] and [client_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Enrich with threat intelligence (mock)
  if [client_ip] {
    if [client_ip] in ["192.168.100.100", "10.0.0.100"] {
      mutate {
        add_tag => ["known_malicious_ip"]
        add_field => { "threat_level" => "high" }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "archangel-logs-%{+YYYY.MM.dd}"
  }
  
  # Output security alerts to separate index
  if "security_alert" in [tags] or "sql_injection_attempt" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "archangel-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output
  stdout {
    codec => rubydebug
  }
}