# Archangel Load Balancing and Service Discovery
# Comprehensive service mesh and load balancing configuration for production

apiVersion: v1
kind: Service
metadata:
  name: archangel-core-service
  namespace: archangel
  labels:
    app: archangel
    component: core
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8888"
    prometheus.io/path: "/metrics"
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
  ports:
    - name: http
      port: 80
      targetPort: 8888
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8888
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
  selector:
    app: archangel
    component: core
    environment: production

---
apiVersion: v1
kind: Service
metadata:
  name: archangel-core-headless
  namespace: archangel
  labels:
    app: archangel
    component: core
    environment: production
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8888
      targetPort: 8888
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
  selector:
    app: archangel
    component: core
    environment: production

---
apiVersion: v1
kind: Service
metadata:
  name: archangel-agents-service
  namespace: archangel
  labels:
    app: archangel
    component: agents
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9091"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 9091
      targetPort: 9091
      protocol: TCP
    - name: health
      port: 8891
      targetPort: 8891
      protocol: TCP
  selector:
    app: archangel
    component: agents
    environment: production

---
# Internal Load Balancer for Agent Communication
apiVersion: v1
kind: Service
metadata:
  name: archangel-agents-internal-lb
  namespace: archangel
  labels:
    app: archangel
    component: agents
    environment: production
    service-type: internal-lb
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  ports:
    - name: communication
      port: 5555
      targetPort: 5555
      protocol: TCP
    - name: coordination
      port: 5556
      targetPort: 5556
      protocol: TCP
  selector:
    app: archangel
    component: agents
    environment: production

---
# Ingress Controller Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: archangel-production-ingress
  namespace: archangel
  labels:
    app: archangel
    component: ingress
    environment: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
spec:
  tls:
    - hosts:
        - api.archangel.production
        - archangel.production
      secretName: archangel-tls-secret
  rules:
    - host: api.archangel.production
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: archangel-core-service
                port:
                  number: 80
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: archangel-core-service
                port:
                  number: 9090
    - host: archangel.production
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: archangel-core-service
                port:
                  number: 80

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: archangel-core-monitor
  namespace: archangel
  labels:
    app: archangel
    component: monitoring
    environment: production
spec:
  selector:
    matchLabels:
      app: archangel
      component: core
      environment: production
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true
      scrapeTimeout: 10s
      metricRelabelings:
        - sourceLabels: [__name__]
          regex: 'go_.*'
          action: drop
        - sourceLabels: [__name__]
          regex: 'promhttp_.*'
          action: drop

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: archangel-agents-monitor
  namespace: archangel
  labels:
    app: archangel
    component: monitoring
    environment: production
spec:
  selector:
    matchLabels:
      app: archangel
      component: agents
      environment: production
  endpoints:
    - port: metrics
      interval: 15s
      path: /metrics
      honorLabels: true
      scrapeTimeout: 10s

---
# Network Policies for Production Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: archangel-production-network-policy
  namespace: archangel
  labels:
    app: archangel
    component: security
    environment: production
spec:
  podSelector:
    matchLabels:
      app: archangel
      environment: production
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    # Allow ingress from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8888
        - protocol: TCP
          port: 9090
    
    # Allow ingress from monitoring namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 9091
    
    # Allow inter-pod communication within namespace
    - from:
        - podSelector:
            matchLabels:
              app: archangel
      ports:
        - protocol: TCP
          port: 8888
        - protocol: TCP
          port: 5555
        - protocol: TCP
          port: 5556
  
  egress:
    # Allow egress to same namespace
    - to:
        - podSelector:
            matchLabels:
              app: archangel
    
    # Allow egress to database
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    
    # Allow egress to Redis
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
    
    # Allow egress to DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    
    # Allow egress to external services (controlled)
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

---
# Istio Service Mesh Configuration
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: archangel-core-vs
  namespace: archangel
  labels:
    app: archangel
    component: service-mesh
    environment: production
spec:
  hosts:
    - api.archangel.production
    - archangel-core-service.archangel.svc.cluster.local
  gateways:
    - archangel-gateway
  http:
    - match:
        - uri:
            prefix: "/health"
      route:
        - destination:
            host: archangel-core-service.archangel.svc.cluster.local
            port:
              number: 8888
      timeout: 10s
      retries:
        attempts: 3
        perTryTimeout: 3s
    
    - match:
        - uri:
            prefix: "/metrics"
      route:
        - destination:
            host: archangel-core-service.archangel.svc.cluster.local
            port:
              number: 9090
      timeout: 30s
    
    - match:
        - uri:
            prefix: "/"
      route:
        - destination:
            host: archangel-core-service.archangel.svc.cluster.local
            port:
              number: 8888
          weight: 100
      timeout: 60s
      retries:
        attempts: 3
        perTryTimeout: 20s
        retryOn: 5xx,reset,connect-failure,refused-stream
      fault:
        delay:
          percentage:
            value: 0.1
          fixedDelay: 5s

---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: archangel-core-dr
  namespace: archangel
  labels:
    app: archangel
    component: service-mesh
    environment: production
spec:
  host: archangel-core-service.archangel.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        keepAlive:
          time: 7200s
          interval: 75s
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    circuitBreaker:
      consecutiveGatewayErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 50
  portLevelSettings:
    - port:
        number: 8888
      loadBalancer:
        simple: ROUND_ROBIN
      connectionPool:
        tcp:
          maxConnections: 50

---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: archangel-gateway
  namespace: archangel
  labels:
    app: archangel
    component: service-mesh
    environment: production
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - api.archangel.production
        - archangel.production
      tls:
        httpsRedirect: true
    
    - port:
        number: 443
        name: https
        protocol: HTTPS
      hosts:
        - api.archangel.production
        - archangel.production
      tls:
        mode: SIMPLE
        credentialName: archangel-tls-secret

---
# Service Mesh Peer Authentication
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: archangel-peer-auth
  namespace: archangel
  labels:
    app: archangel
    component: security
    environment: production
spec:
  selector:
    matchLabels:
      app: archangel
  mtls:
    mode: STRICT

---
# Authorization Policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: archangel-authz-policy
  namespace: archangel
  labels:
    app: archangel
    component: security
    environment: production
spec:
  selector:
    matchLabels:
      app: archangel
      component: core
  rules:
    - from:
        - source:
            principals: ["cluster.local/ns/archangel/sa/archangel-service-account"]
        - source:
            namespaces: ["istio-system"]
      to:
        - operation:
            methods: ["GET", "POST", "PUT", "DELETE"]
      when:
        - key: request.headers[user-agent]
          notValues: ["malicious-bot", "scanner"]

---
# Load Balancer Health Check Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: archangel-lb-config
  namespace: archangel
  labels:
    app: archangel
    component: load-balancer
    environment: production
data:
  nginx.conf: |
    upstream archangel_backend {
        least_conn;
        server archangel-core-service:8888 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream archangel_agents {
        ip_hash;
        server archangel-agents-service:9091 max_fails=2 fail_timeout=15s;
        keepalive 16;
    }
    
    server {
        listen 80;
        server_name api.archangel.production;
        
        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://archangel_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Main application
        location / {
            proxy_pass http://archangel_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Metrics endpoint
        location /metrics {
            proxy_pass http://archangel_backend/metrics;
            proxy_set_header Host $host;
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
    }
  
  health-check.sh: |
    #!/bin/bash
    # Advanced health check script for load balancer
    
    CORE_ENDPOINT="http://archangel-core-service:8888/health"
    AGENTS_ENDPOINT="http://archangel-agents-service:9091/health"
    
    # Check core service
    if ! curl -f -s --max-time 10 "$CORE_ENDPOINT" > /dev/null; then
        echo "Core service health check failed"
        exit 1
    fi
    
    # Check agents service
    if ! curl -f -s --max-time 5 "$AGENTS_ENDPOINT" > /dev/null; then
        echo "Agents service health check failed"
        exit 1
    fi
    
    echo "All services healthy"
    exit 0